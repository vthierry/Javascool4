-----------------------------------------
diff ../../work/src/org/javascool/tools/Xml2Xml.java src/org/javascool/tools/Xml2Xml.java
55c55,56
<     } catch(TransformerConfigurationException e) { throw new RuntimeException(e + " when compiling: " + xsl);
---
>     } catch(TransformerConfigurationException e) { 
>       throw new RuntimeException(e + " when compiling: " + xsl);
-----------------------------------------
diff ../../work/src/org/javascool/tools/ErrorCatcher.java src/org/javascool/tools/ErrorCatcher.java
57,58c57,58
<                                                           (uncaughtExceptionKeyword == null || r.indexOf(uncaughtExceptionKeyword) != -1) &&
<                                                           (!e.getMessage().equals("java.util.ConcurrentModificationException"));
---
> 						    (uncaughtExceptionKeyword == null || r.indexOf(uncaughtExceptionKeyword) != -1) &&
> 						    (e.toString().indexOf("java.util.ConcurrentModificationException") == -1);
-----------------------------------------
diff ../../work/src/org/javascool/builder/DialogFrame.java src/org/javascool/builder/DialogFrame.java
55a56,62
>         Console.getInstance().getToolBar().addRightTool("Convertisseur HML",  new Runnable() {
> 
>                     @Override
>                     public void run() {
> 		      startConvertisseurHML();
>                     }
>                 });
81d87
< 
161a168,174
> 
>     private static void startConvertisseurHML() {
>         JPopupMenu jCreatorMenu = new JPopupMenu();
>         jCreatorMenu.add(new Htm2Hml());
>         Component parent = Console.getInstance().getToolBar();
>         jCreatorMenu.show(jCreatorButton, 0, parent.getHeight());
>     }
-----------------------------------------
diff ../../work/src/org/javascool/gui/JVSToolBar.java src/org/javascool/gui/JVSToolBar.java
3c3
< import javax.swing.JButton;
---
> import org.javascool.core.ProgletEngine;
4a5,6
> import org.javascool.widgets.ToolBar;
> import javax.swing.JButton;
7,8d8
< import org.javascool.builder.ProgletsBuilder;
< import org.javascool.core.ProgletEngine;
10c10
< import org.javascool.widgets.ToolBar;
---
> import org.javascool.builder.ProgletsBuilder;
18c18
< public class JVSToolBar extends ToolBar {
---
> class JVSToolBar extends ToolBar {
42,43d41
<     	setOpaque(false);
<     	setBorder(null);
72c70
<         /*addTool("Sauver sous", "org/javascool/widgets/icons/saveas.png", new Runnable() {
---
>         addTool("Sauver sous", "org/javascool/widgets/icons/saveas.png", new Runnable() {
76c74
<                 JVSPanel.getInstance().saveFile();
---
>                 JVSPanel.getInstance().saveAsFile();
78c76
<         });*/
---
>         });
128,133c126
<        // @todo ici on a mit un platrage car sous Windows XP un java.lang.NoClassDefFoundError: org/javascool/About incomprehensible apparait !!!
<        try {
<           this.add(About.getAboutMessage(), 0);
<        } catch(Exception e) {
<           System.err.println("Dysfonctionnement bizarre:" + e);
<        }
---
>         this.add(About.getAboutMessage(), 0);
136,137c129
<     @SuppressWarnings("unused")
< 	private JButton pbutton;
---
>     private JButton pbutton;
-----------------------------------------
diff ../../work/src/org/javascool/gui/JVSWidgetPanel.java src/org/javascool/gui/JVSWidgetPanel.java
17c17
< public class JVSWidgetPanel extends JVSTabs {
---
> class JVSWidgetPanel extends JVSTabs {
19,86c19,86
< 	private static final long serialVersionUID = 1L;
< 	private String progletTabId;
< 	/** Instance du JVSWidgetPanel */
< 	private static JVSWidgetPanel jwp;
< 
< 	public static JVSWidgetPanel getInstance() {
< 		if (jwp == null) {
< 			jwp = new JVSWidgetPanel();
< 		}
< 		return jwp;
< 	}
< 
< 	private JVSWidgetPanel() {
< 		super();
< 		this.add("Console", "", Console.getInstance());
< 	}
< 
< 	/** Charge les tabs de la proglet
< 	 * Charge le tab de la proglet (Panel) et l'HTMLDisplay avec le fichier d'aide.
< 	 * @param name Le nom du package de la proglet
< 	 */
< 	public void setProglet(String name) {
< 		this.removeAll();
< 		this.add("Console", "", Console.getInstance());
< 		Proglet proglet = ProgletEngine.getInstance().setProglet(name);
< 		if (proglet.getPane() != null) {
< 			this.progletTabId = this.add("Proglet " + name, "", proglet.getPane());
< 		}
< 		if (proglet.getHelp() != null) {
< 			this.add("Aide de la proglet", "", new HtmlDisplay().setPage(Macros.getResourceURL(proglet.getHelp())));
< 			this.switchToTab("Aide de la proglet");
< 		}
< 		HtmlDisplay memo = new HtmlDisplay();
< 		memo.setPage(ClassLoader.getSystemResource(Core.help));
< 		this.add("Mémo", "", memo);
< 	}
< 
< 	/** Affiche l'onglet de la Proglet si il existe */
< 	public void focusOnProgletPanel() {
< 		if (progletTabId != null) {
< 			this.switchToTab(progletTabId);
< 		}
< 	}
< 
< 	/** Affiche la console */
< 	public void focusOnConsolePanel() {
< 		this.setSelectedIndex(this.indexOfTab("Console"));
< 	}
< 
< 	/** Ouvre un nouvel onglet web
< 	 * Ouvre un nouveau HTMLDisplay dans un onglet. Cet onglet peut être fermer à
< 	 * l'aide de la croix qui se situe à droite du titre de l'onglet.
< 	 * @param url L'url de la page à charger
< 	 * @param tabName Le titre du tab à ouvrir
< 	 * @see org.javascool.widgets.HtmlDisplay
< 	 * @see String
< 	 */
< 	public void openWebTab(String url, String tabName) {
< 		if(this.indexOfTab(tabName)>=0){
< 			this.switchToTab(tabName);
< 			return;
< 		}
< 		HtmlDisplay memo = new HtmlDisplay();
< 		memo.setPage(url);
< 		memo.putClientProperty("CLOSABLE", true);
< 		this.add(tabName, "", memo);
< 		this.setSelectedComponent(memo);
< 	}
---
>     private static final long serialVersionUID = 1L;
>     private String progletTabId;
>     /** Instance du JVSWidgetPanel */
>     private static JVSWidgetPanel jwp;
> 
>     public static JVSWidgetPanel getInstance() {
>         if (jwp == null) {
>             jwp = new JVSWidgetPanel();
>         }
>         return jwp;
>     }
> 
>     private JVSWidgetPanel() {
>         super();
>         this.add("Console", "", Console.getInstance());
>     }
> 
>     /** Charge les tabs de la proglet
>      * Charge le tab de la proglet (Panel) et l'HTMLDisplay avec le fichier d'aide.
>      * @param name Le nom du package de la proglet
>      */
>     public void setProglet(String name) {
>         this.removeAll();
>         this.add("Console", "", Console.getInstance());
>         Proglet proglet = ProgletEngine.getInstance().setProglet(name);
>         if (proglet.getPane() != null) {
>             this.progletTabId = this.add("Proglet " + name, "", proglet.getPane());
>         }
>         if (proglet.getHelp() != null) {
>             this.add("Aide de la proglet", "", new HtmlDisplay().setPage(Macros.getResourceURL(proglet.getHelp())));
>             this.switchToTab("Aide de la proglet");
>         }
>         HtmlDisplay memo = new HtmlDisplay();
>         memo.setPage(ClassLoader.getSystemResource(Core.help));
>         this.add("Mémo", "", memo);
>     }
> 
>     /** Affiche l'onglet de la Proglet si il existe */
>     public void focusOnProgletPanel() {
>         if (progletTabId != null) {
>             this.switchToTab(progletTabId);
>         }
>     }
> 
>     /** Affiche la console */
>     public void focusOnConsolePanel() {
>         this.setSelectedIndex(this.indexOfTab("Console"));
>     }
> 
>     /** Ouvre un nouvel onglet web
>      * Ouvre un nouveau HTMLDisplay dans un onglet. Cet onglet peut être fermer à
>      * l'aide de la croix qui se situe à droite du titre de l'onglet.
>      * @param url L'url de la page à charger
>      * @param tabName Le titre du tab à ouvrir
>      * @see org.javascool.widgets.HtmlDisplay
>      * @see String
>      */
>     public void openWebTab(String url, String tabName) {
>         if(this.indexOfTab(tabName)>=0){
>             this.switchToTab(tabName);
>             return;
>         }
>         HtmlDisplay memo = new HtmlDisplay();
>         memo.setPage(url);
>         this.add(tabName, "", memo);
>         this.setTabComponentAt(this.indexOfTab(tabName), new TabPanel(this));
>         this.setSelectedComponent(memo);
>     }
-----------------------------------------
diff ../../work/src/org/javascool/gui/JVSStartPanel.java src/org/javascool/gui/JVSStartPanel.java
15a16
> import javax.swing.JLabel;
18,19d18
< import javax.swing.ScrollPaneConstants;
< import javax.swing.SwingConstants;
42c41
<         super(panel, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
---
>         super(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
53c52
<         for (@SuppressWarnings("unused") ProgletEngine.Proglet proglet : ProgletEngine.getInstance().getProglets()) {
---
>         for (ProgletEngine.Proglet proglet : ProgletEngine.getInstance().getProglets()) {
88,89c87,88
<         label.setVerticalTextPosition(SwingConstants.BOTTOM);
<         label.setHorizontalTextPosition(SwingConstants.CENTER);
---
>         label.setVerticalTextPosition(JLabel.BOTTOM);
>         label.setHorizontalTextPosition(JLabel.CENTER);
-----------------------------------------
diff ../../work/src/org/javascool/gui/Desktop.java src/org/javascool/gui/Desktop.java
13,14d12
< import org.javascool.gui.editor.JVSFileReference;
< import org.javascool.gui.editor.JVSFileTabs;
48,50c46
< 				private static final long serialVersionUID = 1727893520791296658L;
< 
< 				@Override
---
>                 @Override
62c58
<         return JVSToolBar.getInstance();
---
>         return (ToolBar) JVSToolBar.getInstance();
99c95
<                 JVSPanel.getInstance().openFile(new JVSFileReference(file));
---
>                 JVSFileTabs.getInstance().open(file.getAbsolutePath());
103c99
<         	System.out.println("Aie impossible d'ouvrir le fichier "+th);
---
> 	  System.out.println("Aie impossible d'ouvrir le fichier "+th);
115,117c111
<             	JVSFileReference tmpFile=new JVSFileReference();
<             	tmpFile.setContent(FileManager.load(url.toExternalForm()));
<                 JVSPanel.getInstance().openFile(tmpFile);
---
>                 JVSFileTabs.getInstance().openFile(new JVSFile(FileManager.load(url.toExternalForm())));
122c116
<         	System.out.println("Aie impossible d'ouvrir le fichier "+ex);
---
>  	  System.out.println("Aie impossible d'ouvrir le fichier "+ex);
198c192
< 
---
>     
-----------------------------------------
diff ../../work/src/org/javascool/gui/JVSCenterPanel.java src/org/javascool/gui/JVSCenterPanel.java
5,6d4
< import org.javascool.gui.editor.JVSFileTabs;
< 
-----------------------------------------
diff ../../work/src/org/javascool/gui/JVSPanel.java src/org/javascool/gui/JVSPanel.java
6c6
< 
---
> import java.util.HashMap;
10c10
< 
---
> import javax.swing.UIManager;
12,16d11
< import org.javascool.gui.editor.CompileAction;
< import org.javascool.gui.editor.EditorTabs;
< import org.javascool.gui.editor.JVSFileReference;
< import org.javascool.gui.editor.JVSFileTabs;
< import org.javascool.tools.ErrorCatcher;
19,24c14,17
< /**
<  * The main panel for Java's cool This class wich is very static contain all
<  * that we need to run Java's cool like save and open file command. This class
<  * can only be called by JVSPanel on instance otherwise it can throw very big
<  * errors
<  * 
---
> /** The main panel for Java's cool
>  * This class wich is very static contain all that we need to run Java's cool like save and open file command.
>  * This class can only be called by JVSPanel on instance otherwise it can throw very big errors
>  *
28,268c21,404
< 
< 	private static final long serialVersionUID = -913356947524067017L;
< 
< 	/** Access to the unique instance of the JVSPanel object. */
< 	public static JVSPanel getInstance() {
< 		if (desktop == null) {
< 			desktop = new JVSPanel();
< 		}
< 		return desktop;
< 	}
< 
< 	private static JVSPanel desktop = null;
< 
< 	private JVSPanel() {
< 		setVisible(true);
< 		setLayout(new BorderLayout());
< 		add(JVSStartPanel.getInstance());
< 		this.revalidate();
< 	}
< 
< 	/** Get the current EditorTabs.
< 	 * 
< 	 * @return An EditorTabs
< 	 * @throws IllegalStateException if no EditorTabs opened in the left part
< 	 */
< 	public EditorTabs getEditorTabs() throws IllegalStateException {
< 		if(JVSCenterPanel.getInstance().getLeftComponent() instanceof EditorTabs)
< 			return (EditorTabs) JVSCenterPanel.getInstance().getLeftComponent();
< 		throw new IllegalStateException("Left component is not an EditorTabs");
< 	}
< 
< 	/** Close the current proglet.
< 	 * 
< 	 */
< 	public void closeProglet() {
< 		if (closeAllFiles()) {
< 			this.removeAll();
< 			this.setOpaque(true);
< 			this.repaint();
< 			this.validate();
< 			this.repaint();
< 			add(JVSStartPanel.getInstance());
< 			this.repaint();
< 			this.revalidate();
< 			this.repaint();
< 			if (ProgletEngine.getInstance().getProglet() != null)
< 				ProgletEngine.getInstance().getProglet().stop();
< 		}
< 	}
< 
< 	/**
< 	 * Open a new file in the editor
< 	 * 
< 	 * @see JVSFileTabs
< 	 */
< 	public void newFile() {
< 		getEditorTabs().openFile(new JVSFileReference());
< 	}
< 
< 	/** Contain the current CompileAction. */
< 	private CompileAction ca = new CompileAction();
< 
< 	/** Compile edited file in the editor.
< 	 */
< 	public void compileFile() {
< 		ca.actionPerformed(null);
< 	}
< 
< 	/** Open a file. 
< 	 * Start a file chooser and open selected file to the current EditorTabs
< 	 * @see JFileChooser
< 	 * @see JVSFileTabs
< 	 */
< 	public void openFile() {
< 		JFileChooser fc = new JFileChooser();
< 		if (UserConfig.getInstance("javascool").getProperty("dir") != null)
< 			fc.setCurrentDirectory(new File(UserConfig.getInstance("javascool")
< 					.getProperty("dir")));
< 		else if (System.getProperty("os.name").toLowerCase().contains("nix")
< 				|| System.getProperty("os.name").toLowerCase().contains("nux"))
< 			fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
< 		else if (System.getProperty("home.dir") != null)
< 			fc.setCurrentDirectory(new File(System.getProperty("home.dir")));
< 		if (fc.showOpenDialog(Desktop.getInstance().getFrame()) == JFileChooser.APPROVE_OPTION) {
< 			if (!fc.getSelectedFile().exists()) {
< 				JOptionPane.showMessageDialog(Desktop.getInstance().getFrame(),
< 						"Le fichier indiqué n'existe pas !!!", "Erreur", JOptionPane.ERROR_MESSAGE);
< 				return;
< 			}
< 			UserConfig.getInstance("javascool").setProperty("dir",
< 					fc.getSelectedFile().getParentFile().getAbsolutePath());
< 			openFile(new JVSFileReference(fc.getSelectedFile()));
< 		}
< 	}
< 
< 	/** Open a specified file. */
< 	public void openFile(JVSFileReference jvsFileReference) {
< 		getEditorTabs().openFile(jvsFileReference);
< 	}
< 
< 	/** Save the current file.
< 	 * Ask to the user where save the file if is tmp or simple save
< 	 * @see JVSFile
< 	 * @return true on success or false if the file could not be saved
< 	 */
< 	public boolean saveFile() {
< 		if (getEditorTabs().saveCurrentFile()) {
< 			return true;
< 		}
< 		return false;
< 	}
< 
< 	/** Throw to the user a compile error.
< 	 * Show a compile error for an human Open a dialog with compile error
< 	 * explains and hightlight the error line
< 	 * 
< 	 * @param line
< 	 *            The line error
< 	 * @param explication
< 	 *            Human explain for that error
< 	 * @see Console
< 	 */
< 	public void reportCompileError(int line, String explication) {
< 		org.javascool.widgets.Console.getInstance().clear();
< 		JVSWidgetPanel.getInstance().focusOnConsolePanel();
< 		if (ca.getCompiledEditor() != null) {
< 			ca.getCompiledEditor().signalLine(line);
< 		}
< 	}
< 
< 	/**
< 	 * Handle the close application task Check if all files are saved and if the
< 	 * user want to close the application
< 	 * 
< 	 * @return True mean that app can be close and false that app can NOT be
< 	 *         closed
< 	 */
< 	public boolean close() {
< 		return closeAllFiles("Voulez vous vraiment quitter Java's cool ?");
< 	}
< 
< 	/** Ask to user if he want to continue and save files
< 	 * Check if all files are saved and if the user wants to continue
< 	 * 
< 	 * @return True mean that you can continue and false not
< 	 */
< 	public boolean closeAllFiles() {
< 		return closeAllFiles("Voulez vous vraiment continuer ?");
< 	}
< 
< 	/** Ask to user if he want to save files
< 	 * Check if all files are saved and if the user wants to continue
< 	 * @param messageIfAllFilesAreSaved Message to ask to the user
< 	 * @return True mean that you can continue and false not
< 	 */
< 	public boolean closeAllFiles(String messageIfAllFilesAreSaved) {
< 		if (getEditorTabs().isAllFilesSaved()) {
< 			int n = JOptionPane.showConfirmDialog(Desktop.getInstance()
< 					.getFrame(), messageIfAllFilesAreSaved, "Confirmation",
< 					JOptionPane.YES_NO_OPTION);
< 			if (n == JOptionPane.YES_OPTION)
< 				return true;
< 			else
< 				return false;
< 		}
< 		return getEditorTabs().saveAllFiles();
< 	}
< 
< 	/**
< 	 * Charge une nouvelle proglet dans l'interface utilisateur.
< 	 * 
< 	 * @param name
< 	 *            Le nom de code de la proglet (ex:abcdAlgos)
< 	 * @see org.javascool.core.ProgletEngine
< 	 */
< 	public void loadProglet(String name) {
< 		System.gc();
< 		this.removeAll();
< 		try {
< 			JVSToolBar.getInstance().disableDemoButton();
< 			this.revalidate();
< 			this.add(JVSToolBar.getInstance(), BorderLayout.NORTH);
< 			this.add(JVSCenterPanel.getInstance(), BorderLayout.CENTER);
< 			this.revalidate();
< 			JVSCenterPanel.getInstance().revalidate();
< 			JVSCenterPanel.getInstance().setDividerLocation(getWidth() / 2);
< 			JVSCenterPanel.getInstance().revalidate();
< 			JVSWidgetPanel.getInstance().setProglet(name);
< 			if (ProgletEngine.getInstance().getProglet().hasDemo()) {
< 				JVSToolBar.getInstance().enableDemoButton();
< 			} else {
< 				JVSToolBar.getInstance().disableDemoButton();
< 			}
< 			this.newFile();
< 		} catch (Exception e) {
< 			throw new RuntimeException("Unable to load proglet " + name, e);
< 		}
< 	}
< 
< 	/** Report a runtime bug to user.
< 	 * Report a bug to the user without ErrorCatcher. It is used by a proglet to report a bug while execute the user code.
< 	 * @param ex The bug to report
< 	 */
< 	public void reportRuntimeBug(String ex) {
< 		StackTraceElement[] stack = Thread.currentThread().getStackTrace();
< 		int line = 0;
< 		for (StackTraceElement elem : stack) {
< 			if (elem.getFileName().startsWith("JvsToJavaTranslated")) {
< 				line = elem.getLineNumber();
< 			} else {
< 				System.err.println(elem.getClassName());
< 			}
< 		}
< 		if (ca.getCompiledEditor() != null) {
< 			ca.getCompiledEditor().signalLine(line);
< 		}
< 		ProgletEngine.getInstance().doStop();
< 		JOptionPane.showMessageDialog(Desktop.getInstance().getFrame(),
< 				ex, "Erreur du logiciel à la ligne " + line, JOptionPane.ERROR_MESSAGE);
< 	}
< 
< 	@Deprecated
< 	public void reportApplicationBug(String ex) {
< 		Dialog.error("Erreur dans Java's Cool", ex);
< 	}
< 
< 	@Deprecated
< 	public static class Dialog {
< 
< 		/** Show a success dialog */
< 		public static void success(String title, String message) {
< 			JOptionPane.showMessageDialog(Desktop.getInstance().getFrame(),
< 					message, title, JOptionPane.INFORMATION_MESSAGE);
< 		}
< 
< 		/** Show an error dialog */
< 		public static void error(String title, String message) {
< 			JOptionPane.showMessageDialog(Desktop.getInstance().getFrame(),
< 					message, title, JOptionPane.ERROR_MESSAGE);
< 		}
< 	}
---
>     // Empeche de pouvoir renommer itempestivement des folder
>     static {
>     UIManager.put("FileChooser.readOnly", Boolean.TRUE);
>     }
> 
>     private static final long serialVersionUID = 1L;
>     /** This HashMap say if a file has to be saved */
>     HashMap<String, Boolean> haveToSave = new HashMap<String, Boolean>();
>     private Boolean noFileEdited = true;
> 
>     /** Access to the unique instance of the JVSPanel object. */
>     public static JVSPanel getInstance() {
>         if (desktop == null) {
>             desktop = new JVSPanel();
>         }
>         return desktop;
>     }
>     private static JVSPanel desktop = null;
> 
>     private JVSPanel() {
>         setVisible(true);
>         setLayout(new BorderLayout());
>         add(JVSStartPanel.getInstance());
>         this.revalidate();
>     }
> 
>     public void closeProglet() {
>         if (closeAllFiles()) {
>             this.removeAll();
>             this.setOpaque(true);
>             this.repaint();
>             this.validate();
>             this.repaint();
>             add(JVSStartPanel.getInstance());
>             this.repaint();
>             this.revalidate();
>             this.repaint();
>         if (ProgletEngine.getInstance().getProglet() != null)
>            ProgletEngine.getInstance().getProglet().stop();
>         }
>     }
> 
>     /** Open a new file in the editor
>      * @see JVSFileTabs
>      */
>     public void newFile() {
>         String fileId = JVSFileTabs.getInstance().openNewFile();
>         haveToSave.put(fileId, false);
>     }
> 
>     /** Compile file in the editor
>      * @see JVSFileTabs
>      */
>     public void compileFile() {
>         JVSFileTabs.getInstance().getEditor(JVSFileTabs.getCurrentCompiledFile()).removeLineSignals();
>         if (JVSFileTabs.getInstance().saveCurrentFile()) {
>             JVSWidgetPanel.getInstance().focusOnConsolePanel();
>             if (JVSFileTabs.getInstance().compileFile(JVSFileTabs.getInstance().getCurrentFileId())) {
>                 JVSToolBar.getInstance().enableStartStopButton();
>             } else {
>                 JVSToolBar.getInstance().disableStartStopButton();
>             }
>         }
>     }
> 
>     /** Open a file
>      * Start a file chooser and open selected file
>      * @see JFileChooser
>      * @see JVSFileTabs
>      */
>     public void openFile() {
>         final JFileChooser fc = new JFileChooser();
>         if (UserConfig.getInstance("javascool").getProperty("dir") != null) {
>             fc.setCurrentDirectory(new File(UserConfig.getInstance("javascool").getProperty("dir")));
>         } else if (System.getProperty("os.name").toLowerCase().contains("nix") || System.getProperty("os.name").toLowerCase().contains("nux")) {
>             fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
>         } else if (System.getProperty("home.dir") != null) {
>             fc.setCurrentDirectory(new File(System.getProperty("home.dir")));
>         }
>         int returnVal = fc.showOpenDialog(Desktop.getInstance().getFrame());
>         if (returnVal == JFileChooser.APPROVE_OPTION) {
>             String path = fc.getSelectedFile().getAbsolutePath();
>             if(!fc.getSelectedFile().exists()){
>                 Dialog.error("Erreur", "Le fichier indiqué n'existe pas !!!");
>                 return;
>             }
>             UserConfig.getInstance("javascool").setProperty("dir", fc.getSelectedFile().getParentFile().getAbsolutePath());
>             if (noFileEdited) {
>                 noFileEdited = false;
>             }
>             String fileId = JVSFileTabs.getInstance().open(path);
>             haveToSave.put(fileId, false);
>         } else {
>         }
>     }
> 
>     /** Save the current file
>      * @see JVSFileTabs
>      * @see JVSFile
>      */
>     public boolean saveFile() {
>         if (JVSFileTabs.getInstance().saveCurrentFile()) {
>             haveToSave.put(JVSFileTabs.getInstance().getCurrentFileId(), false);
>             return true;
>         }
>         return false;
>     }
> 
>     /** Save the current file
>      * @see JVSFileTabs
>      * @see JVSFile
>      */
>     public boolean saveAsFile() {
>         if (JVSFileTabs.getInstance().saveAsCurrentFile()) {
>             haveToSave.put(JVSFileTabs.getInstance().getCurrentFileId(), false);
>             return true;
>         }
>         return false;
>     }
> 
>     /** Close the current file
>      * @see JVSFileTabs
>      */
>     public void closeFile() {
>         if (haveToSave.get(JVSFileTabs.getInstance().getCurrentFileId())) {
>             if (saveFileIdBeforeClose(JVSFileTabs.getInstance().getCurrentFileId()) == 1) {
>                 JVSFileTabs.getInstance().closeFile(JVSFileTabs.getInstance().getCurrentFileId());
>             }
>         } else {
>             JVSFileTabs.getInstance().closeFile(JVSFileTabs.getInstance().getCurrentFileId());
>         }
>         if (JVSFileTabs.getInstance().getOppenedFileCount() == 0) {
>             newFile();
>         }
>     }
> 
>     /** Update haveToSave for a file
>      * Set it to true
>      * @param fileId The file id
>      */
>     public void mustSave(String fileId) {
>         noFileEdited = false;
>         haveToSave.put(fileId, true);
>     }
> 
>     /** Update haveToSave for a file
>      * Set it to true
>      * @param fileId The file id
>      */
>     public void haveNotToSave(String fileId) {
>         haveToSave.put(fileId, false);
>     }
> 
>     public Boolean getHasToSave(String fileId) {
>         return haveToSave.get(fileId);
>     }
> 
>     /** Show a compile error for an human
>      * Open a dialog with compile error explains and hightlight the error line
>      * @param line The line error
>      * @param explication Human explain for that error
>      * @see Console
>      */
>     public void reportCompileError(int line, String explication) {
>         org.javascool.widgets.Console.getInstance().clear();
>         JVSWidgetPanel.getInstance().focusOnConsolePanel();
>         if (JVSFileTabs.getInstance().getEditor(JVSFileTabs.getCurrentCompiledFile()) != null) {
>             JVSFileTabs.getInstance().getEditor(JVSFileTabs.getCurrentCompiledFile()).signalLine(line);
>         }
>     }
> 
>     /** Handle the close application task
>      * Check if all files are saved and if the user want to close the application
>      * @return True mean that app can be close and false that app can NOT be closed
>      */
>     public Boolean close() {
>         String id = "";
>         Boolean[] can_close = new Boolean[haveToSave.keySet().toArray().length];
>         int i = 0;
>         int j = 0;
>         for (Object fileId : haveToSave.keySet().toArray()) {
>             if (haveToSave.get((String) fileId)) {
>                 j++;
>             }
>         }
>         // If user no have dialog to stop close, we create one
>         if (j == 0) {
>             final int n = JOptionPane.showConfirmDialog(
>                     Desktop.getInstance().getFrame(),
>                     "Voulez vous vraiment quitter Java's cool ?",
>                     "Confirmation",
>                     JOptionPane.YES_NO_OPTION);
>             if (n == JOptionPane.YES_OPTION) {
>                 return true;
>             } else {
>                 return false;
>             }
>         }
>         j = 0;
>         // Check save for each file
>         for (Object fileId : haveToSave.keySet().toArray()) {
>             id = (String) fileId;
>             if (haveToSave.get(id)) {
>                 // File has to be saved
>                 // For number see saveFileIdBeforeClose() documentation about return
>                 switch (saveFileIdBeforeClose(id)) {
>                     case 1:
>                         can_close[i] = true;
>                         break;
>                     case 0:
>                         can_close[i] = false;
>                         break;
>                     case -1:
>                         return false;
>                 }
>                 j++;
>             } else // If file has not to be saved it's good
>             {
>                 can_close[i] = true;
>             }
>             if (can_close[i]) // If we can close this file, we close the tab
>             {
>                 JVSFileTabs.getInstance().closeFile(id);
>             }
>             i++;
>         }
>         // Check if a file is not save, if yes we can not close the application
>         for (Boolean can_close_r : can_close) {
>             if (can_close_r == false) {
>                 return false;
>             }
>         }
>         // We return true if all is good
>         return true;
>     }
> 
>     /** Handle the close file task
>      * Check if all files are saved and if the user want to continue
>      * @return True meen that app can be close and false that app can NOT be closed
>      */
>     public Boolean closeAllFiles() {
>         String id = "";
>         Boolean[] can_close = new Boolean[haveToSave.keySet().toArray().length];
>         int i = 0;
>         int j = 0;
>         for (Object fileId : haveToSave.keySet().toArray()) {
>             if (haveToSave.get((String) fileId)) {
>                 j++;
>             } else {
>                 JVSFileTabs.getInstance().closeFile((String) fileId);
>             }
>         }
>         // If user no have dialog to stop close, we create one
>         if (j == 0) {
>             final int n = JOptionPane.showConfirmDialog(
>                     Desktop.getInstance().getFrame(),
>                     "Voulez vous vraiment continuer ?",
>                     "Confirmation",
>                     JOptionPane.YES_NO_OPTION);
>             if (n == JOptionPane.YES_OPTION) {
>                 return true;
>             } else {
>                 return false;
>             }
>         }
>         j = 0;
>         // Check save for each file
>         for (Object fileId : haveToSave.keySet().toArray()) {
>             id = (String) fileId;
>             if (haveToSave.get(id)) {
>                 // File has to be saved
>                 // For number see saveFileIdBeforeClose() documentation about return
>                 switch (saveFileIdBeforeClose(id)) {
>                     case 1:
>                         can_close[i] = true;
>                         break;
>                     case 0:
>                         can_close[i] = false;
>                         break;
>                     case -1:
>                         return false;
>                 }
>                 j++;
>             } else // If file has not to be saved it's good
>             {
>                 can_close[i] = true;
>             }
>             if (can_close[i]) // If we can close this file, we close the tab
>             {
>                 JVSFileTabs.getInstance().closeFile(id);
>             }
>             i++;
>         }
>         // Check if a file is not save, if yes we can not close the application
>         for (Boolean can_close_r : can_close) {
>             if (can_close_r == false) {
>                 return false;
>             }
>         }
>         // We return true if all is good
>         return true;
>     }
> 
>     /** Ask to user to save a file before it close
>      * @param fileId The file id
>      * @return 1 meen that file is saved or that user not want to save the file. 0 meen that there was an error during the save of file. -1 meen that user want to stop all that happend (Cancel option).
>      */
>     public int saveFileIdBeforeClose(String fileId) {
>         JVSFile file = JVSFileTabs.getInstance().getFile(fileId);
>         int result = JOptionPane.showConfirmDialog(
>                 Desktop.getInstance().getFrame(),
>                 "Voulez vous enregistrer " + file.getName() + " avant de continuer ?");
>         if (result == JOptionPane.YES_OPTION) {
>             if (JVSFileTabs.getInstance().saveFile(fileId)) {
>                 haveToSave.put(fileId, false);
>                 return 1;
>             } else {
>                 return 0;
>             }
>         } else if (result == JOptionPane.NO_OPTION) {
>             return 1;
>         } else {
>             haveToSave.put(fileId, true);
>             return -1;
>         }
>     }
> 
>     /** Charge une nouvelle proglet dans l'interface utilisateur.
>      * @param name Le nom de code de la proglet (ex:abcdAlgos)
>      * @see org.javascool.core.ProgletEngine
>      */
>     public void loadProglet(String name) {
>         System.gc();
>         this.removeAll();
>         JVSToolBar.getInstance().disableDemoButton();
>         this.revalidate();
>         this.add(JVSToolBar.getInstance(), BorderLayout.NORTH);
>         this.add(JVSCenterPanel.getInstance(), BorderLayout.CENTER);
>         this.revalidate();
>         JVSCenterPanel.getInstance().revalidate();
>         JVSCenterPanel.getInstance().setDividerLocation(getWidth() / 2);
>         JVSCenterPanel.getInstance().revalidate();
>         JVSWidgetPanel.getInstance().setProglet(name);
>         if (ProgletEngine.getInstance().getProglet().hasDemo()) {
>             JVSToolBar.getInstance().enableDemoButton();
>         } else {
>             JVSToolBar.getInstance().disableDemoButton();
>         }
>         this.newFile();
>     }
> 
>     public void reportRuntimeBug(String ex) {
>         StackTraceElement[] stack = Thread.currentThread().getStackTrace();
>         int line = 0;
>         for (StackTraceElement elem : stack) {
>             if (elem.getFileName().startsWith("JvsToJavaTranslated")) {
>                 line = elem.getLineNumber();
>             } else {
>                 System.err.println(elem.getClassName());
>             }
>         }
>         if (JVSFileTabs.getInstance().getEditor(JVSFileTabs.getCurrentCompiledFile()) != null) {
>             JVSFileTabs.getInstance().getEditor(JVSFileTabs.getCurrentCompiledFile()).signalLine(line);
>         }
>         ProgletEngine.getInstance().doStop();
>         Dialog.error("Erreur du logiciel à la ligne " + line, ex);
>     }
> 
>     public void reportApplicationBug(String ex) {
>         Dialog.error("Erreur dans Java's Cool", ex);
>     }
> 
>     public static class Dialog {
> 
>         /** Show a success dialog */
>         public static void success(String title, String message) {
>             JOptionPane.showMessageDialog(Desktop.getInstance().getFrame(), message, title, JOptionPane.INFORMATION_MESSAGE);
>         }
> 
>         /** Show an error dialog */
>         public static void error(String title, String message) {
>             JOptionPane.showMessageDialog(Desktop.getInstance().getFrame(), message, title, JOptionPane.ERROR_MESSAGE);
>         }
>     }
