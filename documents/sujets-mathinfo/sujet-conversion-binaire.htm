<div title="Un tutoriel sur la conversion binaire/décimale" class="sujet"> 
  
  <div class="objectif">
    Le but de ce tutoriel est d'expliquer comment sont codés les nombres en binaire.    
  </div>

  <div class="intros">
    <div title="Décrire des nombres en binaire"> (voir le texte "" pour une introduction complète)
     Le tableau suivant donne les 10 premiers nombres en base 10 dans la colonne du milieu et leur représentation binaire dans la colonne de droite :
    <div class="center"/>
     Si nous observons bien ce codage, nous constatons qu'il est le résultat d'un calcul, montré dans la colonne de gauche. 
       Le codage binaire d'un nombre (que nous, humains, écrivons quasiment toujours en base 10, en utilisant 10 chiffres), est ce même nombre, mais <i>écrit en base 2</i>,
       avec 2 chiffres <i>0</i> et <i>1</i>.
   </div>
   <div title="Du codage binaire au nombre entier positif.">Voici le calcul qui permet de retrouver un nombre à partir de son code binaire : 
     additionner les bits, chacun multiplié par la puissance de deux qui lui correspond, comme ci-dessous, donne le nombre en base 10.
     retrouver le nombre 9 à partir de son code binaire:
       <div class="center"/>
       <div class="ul">
         <div>À la première ligne, nous avons multiplié respectivement par 1, 2, 4, 8 de droite à gauche les bits qui représentent 9.</div>
         <div>À la seconde ligne, nous nous sommes aperçus que 1, 2, 4, 8 sont en fait les puissances de 2 : 20,21,22 ..</div>
         <div>À la troisième ligne, nous factorisons 2 autant que possible ; cette écriture avec ses parenthèses bien placées nous montre qu'il suffit de multiplier par deux puis d'additionner les bits de gauche à droite pour trouver le nombre en base 10.</div>
       </div>Voilà donc un calcul, une méthode mécanique, bref un <i>algorithme</i>, qui permet de passer du codage binaire au nombre dans sa représentation usuelle.
     </div>
     <div title="Du nombre entier positif à son codage binaire">
       Réciproquement, il existe un calcul pour obtenir le code binaire de n'importe quel nombre entier. 
       Si nous notons 9 % 2 = 1 le reste de la division par 2 de 9 ou 4 % 2 = 0 le reste de la division de 4 par 2, etc., alors le calcul suivant, 
       où nous calculons successivement le reste de la division par deux puis divisons par deux nous donne... le codage binaire du nombre 9 :
       <div class="center"/>
     </div>
     <div title="Calculer directement sur les nombres binaires">
       Nous pouvons donc représenter des nombres entiers positifs par la suite de bits de leur représentation binaire. 
       Ce codage est très précieux, car il permet de faire directement des opérations sur ces nombres. 
       Par exemple, additionner deux entiers positifs revient à additionner leur représentation binaire : on obtient directement le codage binaire du résultat. De même pour toutes les autres opérations numériques, pour comparer ces entiers entre eux, etc.
       <div>Donc toutes les valeurs numériques sont non seulement stockées en binaire, mais aussi manipulées en binaire dans l'ordinateur.</div>
     </div>
     <div title="Représenter des nombres entiers négatifs et positifsde toute taille et des nombres décimaux">Tout ceci marche aussi pour des nombres plus grands, 
       plus compliqués et d'autres objets numériques (images, sons, ..)
       comme cela vous est expliqué dans le texte "" à notre disposition.
     </div>
     <div class="margin">Une  est disponible ici.</div>
   </div>

  <div class="works">
    <div title="Ecrire et programmer l'algorithme de conversion binaire -&gt; décimal"> <div class="ul">
      <div>A partir de la description du passage du codage binaire au nombre entier positif donnée ci-dessus, compléter l'algorithme suivant, écrit en "pseudo-code":
        <div class="code">
          <div>Entrée: b[0],b[1],b[2],b[3] les quatres bits du nombre à convertir</div>
          <div>Sortie: n le nombre convertir en décimal.</div>
          <div>Algorithme:</div>
          <div>Initialiser n = 0;</div>
          <div>Pour i = 0 à 3 faire:</div>
          <div>n = [ah là: c'est à vous de compléter !!!]</div>
          <div>Résultat: Le nombre n contient la valeur décimale.</div>
        </div>
      </div>
      <div>Traduire maintenant l'algorithme en programme à partir de l'exemple suivant:
        <div class="code">
          // Tableaux des bits du nombre à convertir en décimal
          <div>int bits[] = {1, 0, 1, 0};</div>
          // Valeur du nombre en décimal
          <div>int r;</div>
          A vous d'écrire le code !!!
          <div>echo("Le nombre décimal est: "+n);</div>
        </div> et essayer avec d'autres valeurs de bits[]. 
        <div>Attention à bien faire la calcul de "droite à gauche", en commençant par le bit de poids faible et en finissant par le bit de poids fort.
          Ici le nombre 1, 0, 1, 0 doit donner 8 + 2 = 10 mais si nous considérons les bits à l'envers 
         (c'est à dire comme si c'était 0, 1, 0, 1 cela va donner . . un autre nombre).</div>
      </div>
    </div></div>
    <div title="Ecrire et programmer l'algorithme de conversion décimal -&gt;&gt; binaire"> 
      <div>A partir de la description du passage du nombre entier positif au codage binaire, écrire <div class="ul">
        <div>L'algorithme de division en pseudo-code.</div>
        <div>Un programme qui utilisera, par exemple, l'instruction:
          <div class="code">
            <div>echo("Digit numéro "+i+" = "+(n % 2));</div>
          </div>
          pour donner le digit numéro i (où i est un entier à définir) du nombre décimal.
        </div>
        <div>Reprendre le même programme mais cette fois ci en utilisant un tableau, pour stocker les bits calculés, puis ajouter le code
          <div class="code">
            <div>for(inti = 0; i &lt; bits.length; i++) {</div>
            <div>echo("Digit numéro "+i+" = "+bits[i]);</div>
            <div>}</div>
          </div>
        </div>
      </div></div>
    </div>
    <div title="Calculer directement sur les nombres binaires">
      Nous allons considérer deux nombres binaires:
        <div class="code">
          // Tableaux des bits du nombre à convertir en décimal
          <div>int bits1[] = {1, 0, 1, 0};</div>
          <div>int bits2[] = {0, 1, 0, 0};</div>
          // Tableaux des bits du résultat
          <div>int bits0[] = new int[4];</div>
        </div>
      et à nous d'écrire l'algorithme qui permette de les additionner: <div class="ul">
        <div>en binaire sans les reconvertir en décimal,</div>
        <div>en utilisant la boucle:
          <div class="code">
            <div>for(inti = 3; i &gt;= 0; i--) {</div>
            // A compléter
            <div>}</div>
          </div>
          pour bien calculer de droite à gauche,</div>
        <div>en tenant bien compte de la retenue,</div>
        <div>en mettant le résultat dans le tableau bits0.</div>
        <div>en affichant un message d'erreur si le résultat est plus grand que 15 car . . 4 bits ne suffisent plus pour coder le résultat.</div>
      </div>
      <div>Si le résultat est plus grand que 15, il y a un débordement (un <i>overflow</i>) et le calcul devient . . faux. Dans ce cas notre programme "hurle": il émet une erreur.
      Il se passe exactement la même chose dans la calculette ou dans l'ordinateur: si le nombre est trop grand (plus de environ 2 milliards pour les nombres entiers et plus de
      environ 1078 pour les nombres décimaux) une erreur est générée.</div>
    </div>
  </div>

  <div class="notes">    <div title="A propos de ce tutoriel" id="1"> Ce tutoriel est une idée originale de Laurent Mongiat, Professeur de Physique en 2nd Mesures Physiques et Informatique au Lycée 
    .</div>
  </div>
</div>