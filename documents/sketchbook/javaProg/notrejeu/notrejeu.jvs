//
// Bienvenue au sein du programme Java'sCool du jeu «BAHHZ»
//

// Nos objets graphique sont des étiquettes java
import javax.swing.JLabel;

// Au début du jeu on affiche notre logo et le titre du jeu
void show_banner() {  
  getPane().removeAll();
  left_obstacle = right_obstacle = middle_whole = mobile = null;
  showIcon("titre-du-jeu.jpg", getPane().getWidth() / 2 - 274 / 2, 20, 274, 81, 1);
  left_logo = showIcon("logo-original.jpg", 0, 0, 150, 150, 1);
  right_logo = showIcon("logo-original.jpg", getPane().getWidth() - 150, 0, 150, 150, 1);
}
JLabel left_logo, right_logo;
// . . puis affiche les obstacles à choisir.
void show_menu() {
  show_banner();
  showIcon("choisit-un-obstacle.png", getPane().getWidth() / 2 - 400 / 2, getPane().getHeight() / 4, 400, 45, 1);
  for(int n = 0; n < obstacles.length; n++)
    showIcon(obstacles[n], (getPane().getWidth() * (n + 1)) / (obstacles.length + 2), getPane().getHeight() / 2, 150, 200, 1);
}
String obstacles[] = { 
  "obstacle-arbre.png", "obstacle-cheval.png", "obstacle-mouton.png", "obstacle-mur-marron.png", "obstacle-mur-vert.png", "obstacle-nenuphar.png"
};
// . . et on choisit l'obstacle selon le clic de souris
void click_menu(int x, int y) {
  // Si le clic se fait dans la bande des images des obstacles
  if (getPane().getHeight() / 2 < y && y < getPane().getHeight() / 2 + 200) {
    int n = ((obstacles.length + 2) * x / getPane().getWidth()) - 1;
    show_game(obstacles[0 <= n && n < obstacles.length ? n : obstacles.length - 1]);
  }
}

// Au lancement du jeu on réaffiche banière et obstacles, un des trous au hasard . . et le mobile
void show_game(String obstacle) {
  show_banner();
  left_obstacle = showIcon(obstacle, getPane().getWidth() / 5 - 100, (3 * getPane().getHeight()) / 4 - 100, 200, 200, 4);
  right_obstacle = showIcon(obstacle, getPane().getWidth() - getPane().getWidth() / 5 - 100, (3 * getPane().getHeight()) / 4 - 100, 200, 200, 4);
  middle_whole = showIcon(trous[random(0, trous.length)], getPane().getWidth() / 2 - 100, getPane().getHeight() - 200, 200, 200, 4);    
  mobile = showIcon("abeille.png", mobile_position_horizontale, mobile_position_verticale, 100, 100, 3);
  mobile_position_horizontale = mobile_vitesse_horizontale = mobile_position_verticale = mobile_vitesse_verticale = 0;
  // . . avec de la musique !
  //org.javascool.proglets.syntheSons.FileSoundBit.play("clbustos.wav");
}
JLabel left_obstacle, right_obstacle, middle_whole, mobile;
String trous[] = { 
  "trou-bleu.png", "trou-eau.png", "trou-marron.png", "trou-poubelle.png"
};
// . . et on fait clignoter les logos
void blink_logos() {
  String logo = logos[random(0, logos.length)];
  if (left_logo != null)
    left_logo.setIcon(getIcon(logo));
  if (right_logo != null)
    right_logo.setIcon(getIcon(logo));
}
String logos[] = {
  "logo-original.jpg", "logo-blanc-violet.jpg", "logo-bleu-turquoise.jpg", "logo-bleu.jpg", "logo-jaune.jpg"
};
// . . et on définit comment faire exploser les obstacles
void blow_obstacle(JLabel icon) {
  for(int n = 1; n <= 30; n++) {
    icon.setIcon(getIcon("boum-frame-"+n+".gif"));
    sleep(150);
  }
}

// Au game-over on remplit l'écran de game-over
void show_game_over() {
  getPane().removeAll();
  for(int n = 1000; n >= 0; n -= 10) {
    showIcon("game-over.png", random(0, getPane().getWidth() - 224 / 2), random(0, getPane().getHeight() - 48 / 2), 224, 48, 1);
    sleep(n);
  }
}

// Voilà la mécanique mise en place par Philippe et cie pour que ça marche . . 
void main() {   
  // Mise en place de l'écran de jeu
  getPane().setOpaque(true);
  getPane().setBackground(java.awt.Color.WHITE);
  show_menu();
  // Gestion de la dynamique du jeu
  {
    // Mise en place d'un détecteur de clic de souris
    getPane().addMouseListener(new java.awt.event.MouseAdapter() {
	public void mouseClicked(java.awt.event.MouseEvent e) {
	  System.out.println("> mouse-click at ("+e.getX()+", "+e.getY()+")");
	  click_menu(e.getX(), e.getY());
	}});
    // Changement de la vitesse avec les touches du clavier
    setKeyListener(new Runnable() { public void run() {
      System.out.println("> key-click is '"+getLastKey()+"'");
      if (mobile != null) {
	int mobile_acceleration = 10;
	if ("Left".equals(getLastKey()))
	  mobile_vitesse_horizontale -= mobile_acceleration;
	if ("Right".equals(getLastKey()))
	  mobile_vitesse_horizontale += mobile_acceleration;
	if ("Up".equals(getLastKey()))
	  mobile_vitesse_verticale -= mobile_acceleration;
	if ("Down".equals(getLastKey()))
	  mobile_vitesse_verticale += mobile_acceleration;
      }
    }});
    // Dynamique du mobile
    sample(200, new Runnable() { public void run() {
      // Ici on fait clignoter le logo
      blink_logos();
      // Ici on gère le mobile
      if (mobile != null) {
	// Ici on fait tomber le mobile vers le bas en le freinant horizontalement
	int mobile_deceleration = 2;
	if (mobile_vitesse_verticale < 10)
	  mobile_vitesse_verticale += mobile_deceleration;
	if (abs(mobile_vitesse_horizontale) > 0)
	  mobile_vitesse_horizontale -= mobile_deceleration;
	mobile_position_horizontale += mobile_vitesse_horizontale;
	mobile_position_verticale += mobile_vitesse_verticale;
	// Ici on fait attention que le mobile ne dépasse pas les limites
	if (mobile.getX() > getPane().getWidth() - mobile.getWidth()) {
	  mobile_position_horizontale = getPane().getWidth() - mobile.getWidth();
	  mobile_vitesse_horizontale = 0;
	}
	if (mobile.getY() > getPane().getHeight() - mobile.getHeight()) {
	  mobile_position_verticale = getPane().getHeight() - mobile.getHeight();
	  mobile_vitesse_verticale = 0;
	}
	if (mobile.getX() < 1) {
	  mobile_position_horizontale = 1;
	  mobile_vitesse_horizontale = 0;
	}
	if (mobile.getY() < mobile.getHeight()) {
	  mobile_position_verticale = mobile.getHeight();
	  mobile_vitesse_verticale = 0;
	}
	mobile.setLocation(mobile_position_horizontale, mobile_position_verticale);
	// Si le mobile passe devant un des obstacles il le fait exploser
	if (left_obstacle != null && abs(mobile.getX() - left_obstacle.getX()) < 100 && abs(mobile.getY() - left_obstacle.getY()) < 100) {
	  blow_obstacle(left_obstacle);
	  left_obstacle = null;
	}
	if (right_obstacle != null && abs(mobile.getX() - right_obstacle.getX()) < 100 && abs(mobile.getY() - right_obstacle.getY()) < 100) {
	  blow_obstacle(right_obstacle);
	  right_obstacle = null;
	}
	// Si le mobile passe devant le trou c'est le game-over
	if (abs(mobile.getX() - middle_whole.getX()) < 100 && abs(mobile.getY() - middle_whole.getY()) < 100) {
	  show_game_over();
	}
      }
    }});
  }
}
int mobile_position_horizontale = 0, mobile_vitesse_horizontale = 0, mobile_position_verticale = 0, mobile_vitesse_verticale = 0;
