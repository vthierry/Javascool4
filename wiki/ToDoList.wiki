#summary Liste des choses à faire

<div align="right">'''Voir aussi la TowardsNextVersion qui discute de la version de la rentrée 2011.</div>
 
<div align="right">'''Edition des [http://wiki.inria.fr/sciencinfolycee/Cat%C3%A9gorie:JavaScool pages] du site [http://javascool.gforge.inria.fr JavaScool].'''</div>

= Les urgence de correction (bugs à casser, ajustements en cours) =

Attention : Les bugs et ajustements sont dans la page des issues du Projet

= Chantiers sur les contenus =

== Educlets de simulation de phénomènes physiques ==

  * (nobody) Projet Unisciel pour 2011

== Aprentissage des structures de données ==

  * (nobody) Rendre plus accessible le tutoriel sur les tableaux + ajouter le tutoriel sur les structures de données

  * (nobody) Apprentissage de l'HTML en Pml

  * (vthierry) Mettre Eml et les aspects XML de Pml dans une proglet "données-structures"

  * (vthierry) Creer un about-bml.xml qui détaille les structures de données : tables, liste, etc...

  * (vthierry) Créer un validateur de Hml en XSLT et une syntaxe Pml au XSLT

== Finalisation de `AlgoEditor` ==

  * (nobody) Créer un vrai tutoriel pour `AlgoEditor`

== Autres contenus a creuser ==

  * (nobody) Une proglet sur les échanges client/serveur sur un réseau

  * (vthierry) Créer un lien entre la maquette et les pages sur les vidéos et cie

= Ajustements futurs sur l'outil =

== Développement par les profs de proglets: simplifier et clarifier l'interface ==

  * Definir la notion de widgets pour les petits d'interfaces graphiques et de proglets pour les activites
    * Avoir une interface complete des proglets
    * Definir des proglets.pde dans openprocessing pour en faire directement des proglets

  * Integration automatique des proglets dans la plateforme java -> repertoire

  * Re-homogeniser les noms des routines des proglets:
    * Choisir un mode Name.function() comme dans Math.cos()

  * Générer un jar avec les fichiers xml etc. . par makefile ds javasccol 

  * simplifier l'intégration des proglets/educlets (c'est prévu, l'utilisateur déclare une classe java et les trucs s'ajoutent partout sans avoir a aller patcher les autres fichiers)

  * (vthierry,philien) Creer un activite «Creer sa proglet» qui guide le prof et propose une arborescence standard de fichier <tt>proglet(*.java|/doc-files/*.(xml|jpg|..))</tt>

== Modularisation des briques logicielles ==

  * Offrir les grains de javascool et cie  de maniere modulaire (c'est deja le cas, [http://www.openprocessing.org/portal/?userID=8553 ici] i.e. [http://javascool.gforge.inria.fr/v3/?page=doc:sketchbook/index.html ici], 
    * Le «SIL:O!» devrait etre le lieu ou ces grains s'énumèrent

  * (nobody) Eclater les classes org.javascool en org.javascool.(core|editor|widgets|gui) pour une meilleure lisibilité et co-développement

  * (nobody) Factoriser index.php documenter et publier comme outil générique de syndication de wiki et documents sans header
    * Normaliser les liens dans le index.php

  * (nobody) Identifier et rendre lisible les ``produits dérivés´´ : linkcheck, le mecanisme index.php, le java2jar certifié, etc...

  * (nobody) Publication de chaque proglet/educlet et l'éditeur/compileur en briques séparées
    * Formalisation de la glue : un proglet lance un morceau de soft

== Amélioration de l'éditeur ==
  * Au moins finaliser:
    * la visualisation du crochetage
    * la tabulation automatique


  * Afficher plutot le numero de ligne à gauche dans le bandeau
  * Reformatage peu clair
  * Control-Z presque pas actif
  * Dans JTextPane (SourceEditor) le Undo ne prend pas en compte les copiés-collés

et

  * D'aucun n'aime pas, mais vraiment pas, le composant "boîte à fichiers" de Swing comment le remplacer

  * Voir l'integration de l'editeur processing en cas

== Meilleure intégration avec le site web ==

  * (nobody) Générer pour chaque proglet une page d'accès à ces ressources

  * (nobody) Créer un plan de site avec les pages du wiki

  * (philou) renouveller le look graphique


== Amélioration du prélangage Jvs: le mode Java Beginner ==

  * Eviter les erreurs de compilation grace a des niveaux de langage
  * Ameliorer les messages de compilateur aussi . . à partir de l'observation des erreurs des apprenants

  * Voir le statut du «void main() { }» si il doit être complètement optionnel (qui est ajouté automatiquement si besoin du reste, mais que nous avons choisi de laisser . . ) puisque si on met le code en { } il s'exécute à la cŕeation de la classe et hop. 

  * Test d'égalité sur les strings, éviter le test d'égalité sur référence
    * avec une expression reguliere $expression1 == $expression2 -> equal($expression1,  $expression2)

    * Nommage des String, int, double, boolean: voir à permettre des noms plus simples

C'est un vrai travail de spécification du "pour et contre"
  * + ne pas inventer de truc exotiques qui éloignent des standards et créent de la confusion ensuite
  * + inventer des trucs astucieux qui permettent de servir de marchepied

Au niveau de la mise en oeuvre soit on continue de manipuler le source à coup d'expressions régulières et cela restera très simple, soit on doit travailler sur un arbre syntaxique et il y a un autre outil à mettre en oeuvre

== Intégration dans une plateforme de plus grande ampleur == 

  * Diffuser une version avec le JRE inclus. Voir exemple ici : http://db-maths.nuxit.net/CaRMetal

  * (nobody) Voir à creuser les [http://wiki.inria.fr/sciencinfolycee/JavaScool:Faq#Pourquoi_ne_pas_int.C3.A9grer_JavaScool_sous_Eclipse.2C_NetBeans.2C_Processing_ou_utiliser_JavaWebStart_.3F Différentes Pistes]

  * (nobody) Améliorer encore le rattrapage d'erreur fait au niveau de Java et non de Javascool. 
    * Voir à donner les ereurs du compilateur en petit après le texte filtré.
    * Certains messages sont difficilement interprétables pour des débutants. 

  * (nobody) Créer un RPM (voir un DEB) pour avoir javascool.jar dans la jre/lib/ext ou autre install java standard

  * Connection à un éditeur externe ou Nouvel éditeur, Solutions possibles
    * François Boisson a mise en place pour l'Agreg de maths, http://www.scintilla.org/SciTE.html : stable, puissant, clair : quoi de mieux ?
    * Editeur dépendant du système 
      * Sous windows 
      * Sous linux http://www.nedit.org (au top, mode serveur possible, regexp de course, mais pas de support UTF8, utilisable sous windows vi cygwin)
    * Note: l'usage d'un éditeur externe va bien mais il faut faire attention à le refermer avant de compiler et rééditer 
      * soit penser à faire usage d'un mode client-serveur.

== Autres points à creuser ==

  * (nobody) Avoir une vue homogène entre le site web et la plateforme javascool 
    * Les site web est la plateforme en ligne . .