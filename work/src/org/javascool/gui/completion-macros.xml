<?xml version="1.0" encoding="UTF-8" ?>
<keywords>
    <!-- 
#####################
    Stdin 
#####################
    -->
    <!-- ReadString -->
    <keyword name="readString" title="Stock dans une variable s une String">
        <doc>Crée une variable s qui va contenir une chaîne de caractères demandé à l'utilisateur</doc>
        <code>String s=readString();</code>
    </keyword>
    <keyword name="readString" title="Demande à l'utilisateur une chaîne">
        <doc>Lit une chaîne de caractère dans une fenêtre présentée à l'utilisateur.
Il peut prendre un paramètre de type String qui décrit la valeur à entrer (optionel).
        </doc>
        <code>readString()</code>
    </keyword>
    <!-- ReadInteger -->
    <keyword name="readInteger" title="Stock dans une variable ent un entier">
        <doc>Crée une variable ent qui va contenir un int demandé à l'utilisateur</doc>
        <code>Integer ent=readInteger();</code>
    </keyword>
    <keyword name="readInteger" title="Demande un nombre à l'utilisateur">
        <doc>Lit un nombre entier dans une fenêtre présentée à l'utilisateur.
Il peut prendre un paramètre de type String qui décrit la valeur à entrer (optionel).
        </doc>
        <code>readInteger()</code>
    </keyword>
    <!-- ReadDecimal -->
    <keyword name="readDecimal" title="Stock dans une variable dec un décimal">
        <doc>Crée une variable dec qui va contenir un double demandé à l'utilisateur</doc>
        <code>double dec=readDecimal();</code>
    </keyword>
    <keyword name="readDecimal" title="Demande un nombre décimal à l'utilisateur">
        <doc>Lit un nombre décimal dans une fenêtre présentée à l'utilisateur.
Il peut prendre un paramètre de type String qui décrit la valeur à entrer (optionel).
        </doc>
        <code>readDecimal()</code>
    </keyword>
    <!-- ReadBoolean -->
    <keyword name="readBoolean" title="Stock dans une variable b un booléen">
        <doc>Crée une variable b qui va contenir un booléen demandé à l'utilisateur</doc>
        <code>Boolean dec=readBoolean();</code>
    </keyword>
    <keyword name="readBoolean" title="Demande 'oui' ou 'non' à l'utilisateur">
        <doc>Lit une valeur booléenne dans une fenêtre présentée à l'utilisateur.
Il peut prendre un paramètre de type String qui décrit la valeur à entrer (optionel).
        </doc>
        <code>readBoolean()</code>
    </keyword>
    <!-- 
#####################
    Stdin 
#####################
    -->
    <keyword name="println" title="Affiche du text dans la console">
        <doc>Affiche dans la console une chaîne de caractères ou la représentation textuelle d'un objet sur la console avec un retour à la ligne.</doc>
        <code>println("");</code>
    </keyword>
    <keyword name="print" title="Affiche du text dans la console">
        <doc>Affiche dans la console une chaîne de caractères ou la représentation textuelle d'un objet sur la console sans retour à la ligne.</doc>
        <code>print("");</code>
    </keyword>
    <!-- 
#####################
    Macros
#####################
    -->
    <keyword name="random" title="Génère un entier aléatoirement">
        <doc>Renvoie un nombre entier aléatoire uniformément distribué entre deux valeurs (maximum inclus).</doc>
        <code>random(1, 6);</code>
    </keyword>
    <keyword name="equal" title="Vérifie si deux Strings sont égales">
        <doc>Renvoie true si deux chaînes de caratères sont égales, faux sinon.</doc>
        <code>equal("","")</code>
    </keyword>
    <keyword name="sleep" title="Fait faire une pause au programme">
        <doc>Temporise une durée fixée. Il prend un paramètre optionnel qui est la durée de pause en milli-secondes</doc>
        <code>sleep(1000);</code>
    </keyword>
    <keyword name="assertion" title="Assert l'execution de Java's cool">
        <doc>Vérifie une assertion et arrête le code si elle est fausse. Il prend un paramètre obligatoire qui est la condition.
Si elle est fausse, le programme s'arrête.</doc>
        <code>assertion(true);</code>
    </keyword>
    <keyword name="getIcon" title="Charge une image">
        <doc>Renvoie une icone stockée dans le JAR de l'application. Il prend un paramètre obligatoire qui est l'emplacement de l'icone.</doc>
        <code>getIcon("org/javascool/widget/icons/play.png");</code>
    </keyword>
    <keyword name="openUrl" title="Ouvre le navigateur du système">
        <doc>Ouvre une URL (Universal Resource Location) dans un navigateur extérieur. Il prend un paramètre obligatoire qui est L'URL à afficher.</doc>
        <code>openUrl("http://www.google.fr");</code>
    </keyword>
    <!-- 
#####################
    Java
#####################
    -->
    <keyword name="if" title="Conditionne l'éxecution du code">
        <doc>Vérifie la condition et si elle est vrai, il execute le bloc d'instructions.</doc>
        <code>if(true){
        // Code
    }</code>
    </keyword>
    <keyword name="if" title="Exécute un bloc ou un autre à partir d'une condition">
        <doc>Vérifie la condition et si elle est vrai, il execute le bloc d'instructions. Si elle est fause elle execute le suivant</doc>
        <code>if(true){
        // Code
    } else {
        // Code
    }</code>
    </keyword>
    <keyword name="while" title="Boucle l'éxecution du code à partir d'une condition">
        <doc>Tant que le test est vrai on execute le bloc d'instructions.</doc>
        <code>while(/*condition*/){
        // Code
    }</code>
    </keyword>
    <keyword name="for" title="Boucle l'éxecution du code à partir d'une condition">
        <doc>Tant que le test est vrai on execute le bloc d'instructions.</doc>
        <code><![CDATA[for(int i=0;i</*count*/;i++){
        // Code
    }]]></code>
    </keyword>
</keywords>
